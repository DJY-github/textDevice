#pragma once

#include "cmdb_resmodel_ci.h"
#include "cmdb_resmodel_dp.h"
#include "util_thread.h"

namespace cmdb { namespace resmodel {


class ResModel
{
public:
	typedef std::vector<im_string>			DomainAttrNames;
	typedef	std::map<CIID, CI*>			    MapCI;

	ResModel();
	virtual ~ResModel();

	virtual int	        getCIs(const CIID& ciid_parent, Int32 ci_type, const DomainAttrNames&  domain_names,
							IMData& ci_value, bool need_deep_child = true, const im_string& alias = "");

	virtual void		addCI(const CIIdentifier& ident);
	virtual void        clear();

	virtual int			getAttrs(const CIID& ciid, const DomainAttrNames&  domain_names, IMData& ci_value);
	virtual int			getDomainAttrs(const CIID& ciid, const im_string& domain, IMData& attrs);
    int			        getDpDomainAttrs(const CIID& ciid, const im_string& domain, IMData& attrs);
	virtual void		setAttrs(const CIID& ciid, const IMData& ci_value);

	virtual void		addCI_nolock(const CIIdentifier& ident);

	int					getCIIdent(const CIID& ciid, CIIdentifier& ident);
	int					updateCIIdent(const CIID& ciid, const CIIdentifier& ident, IMData& resp);

	int					getCIFullName(const CIID& ciid, IMData& ci_fullname);
	int					getCIByName(Int32 ci_type, const im_string& ci_name, IMData& ci_value);
	int					updateDpName(const CIID& ciid, const im_string& dp_name);
	bool                isBrotherExistSameName(const CIID& ciid, const im_string& ci_name);
    bool                isChildExistSameName(const CIID& ciid, const im_string& ci_name);
    bool                isExistDomain(const CIID& ciid, const im_string& domain);
    bool                isDpExistDomain(const CIID& ciid, const im_string& domain);

    bool			    isExtmodDev(const CIID& devid, im_string& modname);

	const CIID			requestNewID(int ci_type, const CIID& parent_id, const im_string& tid = "");

	CIID				parentID(const CIID& ciid, Int32 ci_type);
	CIID				CIIDToDeviceID(const CIID& ciid);
	std::vector<CIID>	parentIDs(const CIID& ciid, Int32 ci_type);
	int                 childrenIDs(const CIID& ciid, Int32 ci_type, std::list<CIID>& list_ids);

protected:
	int					getCI(CI* ci, Int32 ci_type ,const DomainAttrNames&  domain_names, IMData& ci_value,
								bool need_deep_child = true, const im_string& alias = "");

	void				convertToIMData(const CI *ci, const DomainAttrNames& domain_attr_names, bool have_ident, IMData& ci_data);
	void				regiestID(const CIID& ciid);
	void				buildParentAndChild();

    void		        removeCI(const CIID& ciid, std::vector<CIID>& affected_ciids, bool only_children = false);


private:
    void                removeDpAttrs(const CI* ci, std::vector<CIID>& affected_ciids);
    int                 getAttrsByDp(const CIID& ciid, const DomainAttrNames&  domain_names, bool have_ident, IMData& ci_value);


protected:
	MapCI					map_ci_;
	util::IMRWMutex			mutex_map_ci_;
	UnTplDpAttrs            untpl_dp_;


private:
	typedef std::multimap<CIID, CI*>  MMapChild;
	MMapChild				mmap_child_;
	CI*						root_ci_;

};

}}

